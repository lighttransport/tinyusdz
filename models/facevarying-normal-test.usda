#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "Torus"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Mesh"
        {
            float3[] extent = [(-0.6249998, 0, -0.21650635), (1.25, 1.0825319, 0.21650635)]
            int[] faceVertexCounts = [4, 4]
            int[] faceVertexIndices = [0, 3, 4, 1, 2, 5, 3, 0]
            normal3f[] normals = [(0.37796456, 0.65465367, 0.65465367), (0.37796456, 0.65465367, 0.65465367), (0.37796456, 0.65465367, 0.65465367), (0.37796456, 0.65465367, 0.65465367), (0.37796453, 0.65465355, -0.65465367), (0.37796453, 0.65465355, -0.65465367), (0.37796453, 0.65465355, -0.65465367), (0.37796453, 0.65465355, -0.65465367)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(1.25, 0, 0), (0.875, 0, 0.21650635), (0.875, 0, -0.21650635), (-0.6249998, 1.0825319, 0), (-0.43749988, 0.7577723, 0.21650635), (-0.43749988, 0.7577723, -0.21650635)]
            bool[] primvars:sharp_face = [1, 1] (
                interpolation = "uniform"
            )
            #texCoord2f[] primvars:UVMap = [(0.6666667, 0.6666667), (1, 0.6666667), (1, 1), (0.6666667, 1), (0.6666667, 0.33333334), (1, 0.33333334), (1, 0.6666667), (0.6666667, 0.6666667)] (
            #    interpolation = "faceVarying"
            #)
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Camera"
    {
        matrix4d xformOp:transform = ( (0.6859206557273865, 0.7276763319969177, 0, 0), (-0.32401347160339355, 0.305420845746994, 0.8953956365585327, 0), (0.6515582203865051, -0.6141703724861145, 0.44527140259742737, 0), (7.358891487121582, -6.925790786743164, 4.958309173583984, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Camera "Camera"
        {
            float2 clippingRange = (0.1, 100)
            float focalLength = 0.5
            float horizontalAperture = 0.36
            float horizontalApertureOffset = 0
            token projection = "perspective"
            float verticalAperture = 0.2025
            float verticalApertureOffset = 0
        }
    }
}

